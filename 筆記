# 筆記

- 最受歡迎程式語言: Python
- 執行python最簡單的地方: Colab
- python變數有哪些? int, float, str, bool
- 善用問題解答工具: Google(含圖片), ChatGPT(3.5), Youtube
- 知識管理工具: Notion, Github (search, 卡片盒筆記法)
- Python藝術創作: ColabTurtle
- for, range(5): 0,1,2,3,4

# 如何寫PYTHON迴圈

在Python中，迴圈是一種重複執行某些程式碼的結構。我們可以使用`for`或`while`迴圈來實現這種結構。

## For 迴圈

`for`迴圈用於在集合（例如列表，元組或字典）中遍歷元素。

以下是一個使用`for`迴圈遍歷列表的範例：

```
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

```

輸出：

```
apple
banana
cherry

```

我們也可以使用`range()`函數來進行迴圈。這個函數可以生成一個連續的數字序列。以下是一個使用`range()`函數的範例：

```
for x in range(6):
  print(x)

```

輸出：

```
0
1
2
3
4
5

```

## While 迴圈

`while`迴圈在條件為真時重複執行程式碼塊。以下是一個使用`while`迴圈的範例：

```
i = 1
while i < 6:
  print(i)
  i += 1

```

輸出：

```
1
2
3
4
5

```

在這個範例中，`while`迴圈會在`i`小於6時重複執行。每次迴圈執行時，`i`的值會增加1。

**NOTION**

NOTION AI 是一種人工智能技術，它是由 NOTION 公司所開發的，旨在幫助使用者更好地組織和管理他們的工作和項目。

NOTION AI 的原理基於自然語言處理技術和機器學習算法。它使用先進的語意分析技術來理解用戶輸入的文本，從而提供更加智能化的建議和操作。

具體而言，NOTION AI 具有以下幾個關鍵特點：

1. 語意分析： NOTION AI 可以分析用戶輸入的文本，並理解其含義和意圖。它能夠識別關鍵字和詞彙，並根據上下文進行分析和理解。
2. 自動填充： NOTION AI 可以自動填充用戶輸入的內容，這樣可以大大減少用戶的工作量。例如，當用戶輸入一個項目名稱時，NOTION AI 可以自動填充相關的內容，如日期、負責人等。
3. 預測性分析： NOTION AI 可以進行預測性分析，並提供相關的建議和操作。例如，當用戶輸入一個任務時，NOTION AI 可以根據以往的數據和經驗預測該任務的完成時間和難度。

總之，NOTION AI 的原理是基於自然語言處理和機器學習技術，它可以幫助用戶更好地組織和管理他們的工作和項目，提高工作效率和生產力。

# 什麼是ITS?

Information Technology Specialist（IT 資訊科技專家認證），簡稱 ITS，是Pearson VUE／Certiport 推出符合產業趨勢的初階資訊科技認證，涵蓋 IT 資訊技術、資料庫、軟體研發、新興科技四大領域，共十三個科目，目標對象為正在考慮或剛剛開始踏上資訊科技職涯的人士，透過 IT 資訊科技專家訓練課程，可驗證考生在各個 IT 領域中的知識，與是否具備雇主所需的 IT 技能，其中包含軟體開發、資料庫管理、網路與安全、行動與裝置管理、程式開發、編程與代碼、雲端運算以及人工智慧，幫助考生為未來職涯做好準備。即使是國際性的專業認證、英文證書，但是在試題上可以自由選擇語系，因此，在國內的 ITS 認證考試亦提供有正體中文化試題，只要通過 Certiport 的認證考試，即頒發全球通用的國際性證書。

Python 2 Tutorial

內建型態都是物件，像是：

- 數值型態（Numeric type） - `int, long, float, bool, complex`
- 字串型態（String type）
- 容器型態（Container type） - `list, set, dict, tuple`

https://openhome.cc/Gossip/CodeData/PythonTutorial/NumericString.html

# `list` 型態

`list` 是有序且可變群集（Collection），在 Python 中，`[1, 2, 3]` 這樣的語法，即可建立含元素 1、2、3 而索引 0、1、2 的 `list` 實例。

# Numpy

1. **NumPy**是[Python語言](https://zh.wikipedia.org/wiki/Python)的一個擴充程式庫。支援高階大規模的[多維](https://zh.wikipedia.org/wiki/%E7%B6%AD%E5%BA%A6)[陣列](https://zh.wikipedia.org/wiki/%E9%99%A3%E5%88%97)與[矩陣](https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%99%A3)運算，此外也針對陣列運算提供大量的[數學](https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8)[函式](https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8)[函式庫](https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB)。

### 2. **ndarray 資料結構:** NumPy的核心功能是ndarray（即*n*-dimensional array，多維陣列）資料結構。這是一個表示多維度、同質並且固定大小的陣列物件。

### 3. **局限性:** 在陣列中插入或追加元素並不像Python的list一樣簡單。

NumPy的陣列必須占用連續的記憶體空間

# Pandas (AI, 機器學習)

1.在[電腦編程](https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B)中，**pandas**是[Python](https://zh.wikipedia.org/wiki/Python)[程式語言](https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80)的用於資料操縱和分析的[軟體庫](https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BA%93)。

2.特別是，它提供操縱數值表格和[時間序列](https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97)的資料結構和運算操作。

3.它的名字衍生自術語***「[縱橫資料](https://zh.wikipedia.org/wiki/%E9%9D%A2%E6%9D%BF%E6%95%B0%E6%8D%AE)」（panel data）***，這是[計量經濟學](https://zh.wikipedia.org/wiki/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6)的資料集術語，它們包括了對同一個體的在多個時期上的觀測[[3]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-3)。它的名字還可解釋為短語「Python data analysis」自身的文字遊戲[[4]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-4)。

## 庫特徵

- 資料框（DataFrame）對象，用於憑藉整合索引進行資料操縱。
- 在記憶體中資料結構和不同的檔案格式之間讀寫資料的工具。
- 資料對齊和整合的缺失資料處理。
- 資料結構列的插入和刪除。
- 資料集的合併和連接。
- 時間序列功能：資料範圍生成和頻率轉換，移動窗口統計，移動窗口線性回歸，資料轉移（shift）和滯後（lag）。
- 提供資料過濾。

這個庫對效能進行了高度最佳化，具有關鍵代碼路徑用[Cython](https://zh.wikipedia.org/wiki/Cython)或[C](https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80)寫成[[7]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-7)。

## 資料框

pandas主要用於[資料分析](https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90)。pandas的資料框允許操縱各種資料檔案格式，比如匯入匯出[CSV](https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC)、[JSON](https://zh.wikipedia.org/wiki/JSON)、[SQL](https://zh.wikipedia.org/wiki/SQL)、[HDF5](https://zh.wikipedia.org/wiki/HDF5)和匯入[Microsoft Excel](https://zh.wikipedia.org/wiki/Microsoft_Excel)等[[8]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-8)。

pandas允許各種資料操縱運算操作比如合併[[9]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-9)、再成形[[10]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-10)、選擇[[11]](https://zh.wikipedia.org/zh-tw/Pandas#cite_note-11)，還有[資料淨化](https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97)和[資料加工](https://zh.wikipedia.org/w/index.php?title=%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%B7%A5&action=edit&redlink=1)特徵。

### 截圖: [Win]+[shift]+[s]

### 錄影: [Win]+[g]

# **舊式字串格式化（%）**

相對於 Python 版本之後推薦使用的新式字串格式化，舊式版本使用 `%` 運算子來進行字串格式化，若是有 C 語言撰寫經驗的讀者或許會覺得的似曾相似（是不是有點像 printf？）。使用 `%` 格式是告訴 Python 直譯器要在那邊替換文字 text 並使用字串呈現。這就是所謂的舊式字串格式化（%s 是以字串輸出，%f 是以浮點數輸出、%d 是以十進位整數輸出）

# **新式字串格式化（format()）**

在 Python3 以後，開始引進新串格式化，也就是使用 `format()` 函式來讓字串格式化，其功能和舊式格式化相差無幾，但主要是捨去 `%` 讓字串格式化使用上可以更加正常、規律，可讀性也相對提升。

# **字串插值（Formatted String Literal）**

雖然已經有了新式字串格式化，然而在 Python 3.6 又新增了格式字串字面值（Formatted String Literal）此一作法可以把 Python 運算式嵌入在字串常數中。
